using MySqlConnector;
using ProdLogApp.Models;
using ProdLogApp.Interfaces;
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Threading.Tasks;

namespace ProdLogApp.Services
{
    public class DatabaseService : IDatabaseService
    {
        //conexion
        private const string ConnectionString = "Server=127.0.0.1;Port=3307;Database=ProdLog_BD;User Id=root;Password=Madersa;";

        public MySqlConnection GetConnection()
        {
            try
            {
                return new MySqlConnection(ConnectionString);
            }
            catch (Exception ex)
            {
                throw new Exception($"Database connection failed: {ex.Message}");
            }
        }

        public bool TestConnection()
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                return connection.State == ConnectionState.Open;
            }
        }

        public void AgregarProductoEnDB(Producto producto)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "INSERT INTO Producto (ProductoNombre, CategoriaId) VALUES (@Nombre, @CategoriaId);";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Nombre", producto.Nombre);
                    command.Parameters.AddWithValue("@CategoriaId", producto.CategoriaId);
                    command.ExecuteNonQuery();
                }
            }
        }

        public List<Producto> ObtenerTodosLosProductos()
        {
            var productos = new List<Producto>();

            using (var connection = GetConnection())
            {
                connection.Open();
                string query = @"
                    SELECT p.ProductoId, p.ProductoNombre, p.CategoriaId, c.CategoriaNombre, p.Activo 
                    FROM Producto p
                    INNER JOIN Categoria c ON p.CategoriaId = c.CategoriaId;";

                using (var command = new MySqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        productos.Add(new Producto
                        {
                            Id = reader.GetInt32("ProductoId"),
                            Nombre = reader.GetString("ProductoNombre"),
                            CategoriaId = reader.GetInt32("CategoriaId"),
                            CategoriaNombre = reader.GetString("CategoriaNombre"),
                            Activo = reader.GetBoolean("Activo")
                        });
                    }
                }
            }

            return productos;
        }

        public void ModificarProductoEnDB(Producto producto)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "UPDATE Producto SET ProductoNombre = @Nombre, CategoriaId = @CategoriaId WHERE ProductoId = @Id;";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Nombre", producto.Nombre);
                    command.Parameters.AddWithValue("@CategoriaId", producto.CategoriaId);
                    command.Parameters.AddWithValue("@Id", producto.Id);
                    command.ExecuteNonQuery();
                }
            }
        }

        public void ToggleProductState(int productoId, bool estado)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "UPDATE Producto SET Activo = @Estado WHERE ProductoId = @ProductoId;";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Estado", !estado);
                    command.Parameters.AddWithValue("@ProductoId", productoId);
                    command.ExecuteNonQuery();
                }
            }
        }



        //Categorias
        public async Task<List<Categoria>> CategoriesGet(bool soloActivas = false)
        {
            var categorias = new List<Categoria>();

            using (var connection = GetConnection())
            {
                await connection.OpenAsync();

                string query = soloActivas
                    ? "SELECT CategoriaId, CategoriaNombre, Activo FROM Categoria WHERE Activo = TRUE;"
                    : "SELECT CategoriaId, CategoriaNombre, Activo FROM Categoria;";

                using (var command = new MySqlCommand(query, connection))
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        categorias.Add(new Categoria
                        {
                            CategoryId = reader.GetInt32("CategoriaId"),
                            Nombre = reader.GetString("CategoriaNombre"),
                            Activo = reader.GetBoolean("Activo")

                        });
                    }
                }
            }

            return categorias;
        }


        public void ToggleCategoryStatus(int CategoryId, bool estado)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "UPDATE Categoria SET Activo = @Estado WHERE CategoriaId = @CategoryId;";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Estado", estado);
                    command.Parameters.AddWithValue("@CategoryId", CategoryId);
                    command.ExecuteNonQuery();
                }
            }
        }

        public async Task AgregarCategoria(Categoria categoria)
        {
            using (var connection = GetConnection())
            {
                await connection.OpenAsync();
                string query = "INSERT INTO Categoria (CategoriaNombre) VALUES (@Nombre);";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Nombre", categoria.Nombre);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }

        public async Task ActualizarCategoria(Categoria categoria)
        {
            using (var connection = GetConnection())
            {
                await connection.OpenAsync();
                string query = "UPDATE Categoria SET CategoriaNombre = @Nombre WHERE CategoriaId = @Id;";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Nombre", categoria.Nombre);
                    command.Parameters.AddWithValue("@Id", categoria.CategoryId);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }
        // Puestos
        public void AgregarPuesto(Position puesto)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "INSERT INTO Puesto (Nombre) VALUES (@Nombre);";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Nombre", puesto.Nombre);
                    command.ExecuteNonQuery();
                }
            }
        }

        public void ActualizarPuesto(Position puesto)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "UPDATE Puesto SET Nombre = @Nombre WHERE PuestoId = @Id;";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Nombre", puesto.Nombre);
                    command.Parameters.AddWithValue("@Id", puesto.PuestoId);
                    command.ExecuteNonQuery();
                }
            }
        }

        public List<Position> ObtenerTodosLosPuestos()
        {
            var puestos = new List<Position>();

            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "SELECT PuestoId, Nombre, Activo FROM Puesto;";

                using (var command = new MySqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        puestos.Add(new Position
                        {
                            PuestoId = reader.GetInt32("PuestoId"),
                            Nombre = reader.GetString("Nombre"),
                            Activo = reader.GetBoolean("Activo")
                        });
                    }
                }
            }

            return puestos;
        }

        public List<Position> ObtenerPuestosActivos()
        {
            var puestos = new List<Position>();

            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "SELECT PuestoId, Nombre, Activo FROM Puesto WHERE Activo = TRUE;";

                using (var command = new MySqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        puestos.Add(new Position
                        {
                            PuestoId = reader.GetInt32("PuestoId"),
                            Nombre = reader.GetString("Nombre"),
                            Activo = reader.GetBoolean("Activo")
                        });
                    }
                }
            }

            return puestos;
        }

        public List<Position> ObtenerPuestos()
        {
            // Delegamos en ObtenerPuestosActivos y ordenamos por nombre
            return ObtenerPuestosActivos()
                .OrderBy(p => p.Nombre)
                .ToList();
        }

        public void TogglePositionState(int puestoId, bool estado)
        {
            using (var connection = GetConnection())
            {
                connection.Open();
                string query = "UPDATE Puesto SET Activo = @NuevoEstado WHERE PuestoId = @Id;";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@NuevoEstado", !estado);
                    command.Parameters.AddWithValue("@Id", puestoId);
                    command.ExecuteNonQuery();
                }
            }
        }

        //Usuarios

        public async Task<List<User>> UsersGet(bool soloActivas = false)
        {
            var users = new List<User>();

            using (var connection = GetConnection())
            {
                await connection.OpenAsync();

                string query = "SELECT UsId, UsNombre, UsDNI, UsGerente, UsFechaIngreso, UsActivo FROM Usuario";
                if (soloActivas)
                    query += " WHERE UsActivo = TRUE;";



                using (var command = new MySqlCommand(query, connection))
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        users.Add(new User
                        {
                            Id = reader.GetInt32("UsId"),
                            Name = reader.GetString("UsNombre"),   
                            Dni = reader.GetString("UsDNI"),      
                            IsAdmin = reader.GetBoolean("UsGerente"),
                            Fingreso = reader.GetDateOnly("UsFechaIngreso"),
                            Active = reader.GetBoolean("UsActivo")
                        });

                    }
                }
            }

            return users;
        }
        public async Task AddUser(User user) { }

        public async Task UpdateUser(User user) { }

        // ===========================================
        // PRODUCTIONS
        // ===========================================


        public async Task<bool> SavePartProductionsAsync(List<Production> productions, int userId, CancellationToken ct = default)
        {
            if (productions is null || productions.Count == 0) return true;

            await using var conn = GetConnection();
            await conn.OpenAsync(ct);
            await using var tx = await conn.BeginTransactionAsync(ct);

            const string sql = @"
                INSERT INTO Producciones
                    (ProductoId, PuestoId, HInicio, HFin, Cantidad, UsuarioId, FechaCarga)
                VALUES
                    (@ProductoId, @PuestoId, @HInicio, @HFin, @Cantidad, @UsuarioId, @FechaCarga);";

            try
            {
                await using var cmd = new MySqlCommand(sql, conn, (MySqlTransaction)tx);
                cmd.Parameters.Add("@ProductoId", MySqlDbType.Int32);
                cmd.Parameters.Add("@PuestoId", MySqlDbType.Int32);
                cmd.Parameters.Add("@HInicio", MySqlDbType.Time);
                cmd.Parameters.Add("@HFin", MySqlDbType.Time);
                cmd.Parameters.Add("@Cantidad", MySqlDbType.Int32);
                cmd.Parameters.Add("@UsuarioId", MySqlDbType.Int32);
                cmd.Parameters.Add("@FechaCarga", MySqlDbType.DateTime);

                foreach (var p in productions)
                {
                    cmd.Parameters["@ProductoId"].Value = p.ProductoId;
                    cmd.Parameters["@PuestoId"].Value = p.PuestoId;
                    cmd.Parameters["@HInicio"].Value = p.HInicio; // TimeSpan
                    cmd.Parameters["@HFin"].Value = p.HFin;       // TimeSpan
                    cmd.Parameters["@Cantidad"].Value = p.Cantidad;
                    cmd.Parameters["@UsuarioId"].Value = userId;
                    cmd.Parameters["@FechaCarga"].Value = DateTime.UtcNow;

                    await cmd.ExecuteNonQueryAsync(ct);
                }

                await tx.CommitAsync(ct);
                return true;
            }
            catch
            {
                await tx.RollbackAsync(CancellationToken.None);
                throw;
            }
        }

        // Versión sync para compatibilidad con tu firma existente:
        public bool SavePartProductions(List<Production> productions, int userId)
        {
            return SavePartProductionsAsync(productions, userId).GetAwaiter().GetResult();
        }

        // Opcional: lectura diaria async
        public async Task<List<Production>> GetDailyProductionsAsync(CancellationToken ct = default)
        {
            var list = new List<Production>();

            await using var conn = GetConnection();
            await conn.OpenAsync(ct);

            const string sql = @"
                SELECT ProductoId, PuestoId, HInicio, HFin, Cantidad
                FROM Producciones
                WHERE DATE(FechaCarga) = CURDATE();";

            await using var cmd = new MySqlCommand(sql, conn);
            await using var reader = await cmd.ExecuteReaderAsync(ct);

            while (await reader.ReadAsync(ct))
            {
                list.Add(new Production
                {
                    ProductoId = reader.GetInt32("ProductoId"),
                    PuestoId = reader.GetInt32("PuestoId"),
                    HInicio = reader.GetTimeSpan("HInicio"),
                    HFin = reader.GetTimeSpan("HFin"),
                    Cantidad = reader.GetInt32("Cantidad")
                });
            }

            return list;
        }

        // Tu firma sync existente:
        public List<Production> GetDailyProductions()
        {
            return GetDailyProductionsAsync().GetAwaiter().GetResult();
        }

        public async Task<int> ConfirmarProduccionAsync(Production production, int userId, CancellationToken ct = default)
        {
            if (production == null) throw new ArgumentNullException(nameof(production));
            await using var conn = GetConnection();
            await conn.OpenAsync(ct);

            const string sql = @"
        INSERT INTO Producciones
            (Producto_Id, Puesto_Id, Produccion_HoraInicio, Produccion_HoraFin, Produccion_Cantidad)
        VALUES
            (@ProductoId, @PuestoId, @HInicio, @HFin, @Cantidad);";

            await using var cmd = new MySqlCommand(sql, conn);
            cmd.Parameters.AddWithValue("@ProductoId", production.ProductoId);
            cmd.Parameters.AddWithValue("@PuestoId", production.PuestoId);
            cmd.Parameters.AddWithValue("@HInicio", production.HInicio);
            cmd.Parameters.AddWithValue("@HFin", production.HFin);
            cmd.Parameters.AddWithValue("@Cantidad", production.Cantidad);
          

            await cmd.ExecuteNonQueryAsync(ct);
            return (int)cmd.LastInsertedId;
        }




        public async Task<List<Production>> GetProductionsAsync(int usuarioId, DateTime fecha)
        {
            var result = new List<Production>();

            // Rango del día
            var desde = fecha.Date;
            var hasta = desde.AddDays(1);

            const string sql = @"
        SELECT p.Produccion_Id,
               p.Produccion_HoraInicio,
               p.Produccion_HoraFin,
               p.Produccion_Cantidad,
               p.Producto_Id,
               p.Puesto_Id,
               p.Parte_Id
        FROM Producciones p
        INNER JOIN Parte pa ON p.Parte_Id = pa.Parte_Id
        WHERE pa.Usuario_Id = @UsuarioId
          AND pa.Parte_Fecha >= @Desde
          AND pa.Parte_Fecha < @Hasta
        ORDER BY p.Produccion_HoraInicio;";

            await using var conn = GetConnection();
            await conn.OpenAsync();

            await using var cmd = new MySqlCommand(sql, conn);
            cmd.Parameters.Add("@UsuarioId", MySqlDbType.Int32).Value = usuarioId;
            cmd.Parameters.Add("@Desde", MySqlDbType.Date).Value = desde;
            cmd.Parameters.Add("@Hasta", MySqlDbType.Date).Value = hasta;

            await using var rd = await cmd.ExecuteReaderAsync();
            while (await rd.ReadAsync())
            {
                result.Add(new Production
                {
                    ProductionId = rd.GetInt32("Produccion_Id"),
                    HInicio = rd.GetTimeSpan("Produccion_HoraInicio"),
                    HFin = rd.GetTimeSpan("Produccion_HoraFin"),
                    Cantidad = rd.GetInt32("Produccion_Cantidad"),
                    ProductoId = rd.GetInt32("Producto_Id"),
                    PuestoId = rd.GetInt32("Puesto_Id"),
                    ParteId = rd.GetInt32("Parte_Id")
                });
            }

            return result;
        }


        // Helpers
        private static int GetInt32(MySqlDataReader rd, string name)
        {
            int i = rd.GetOrdinal(name);
            return rd.IsDBNull(i) ? 0 : rd.GetInt32(i);
        }

        private static TimeSpan GetTimeSpan(MySqlDataReader rd, string name)
        {
            int i = rd.GetOrdinal(name);
            return rd.IsDBNull(i) ? TimeSpan.Zero : rd.GetTimeSpan(i);
        }


        

    }
}
